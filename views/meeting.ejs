<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://pro.fontawesome.com/releases/v5.10.0/css/all.css" integrity="sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p" crossorigin="anonymous"/>
  <link rel="stylesheet" href='/index.css'/>
  <link rel="stylesheet" href='/meeting_0.css'/>
  <script>
    const ROOM_ID = '<%= roomId %>'
  </script>
  <script src="/socket.io/socket.io.js"></script>
  <!-- <script src="script.js"></script> -->
  <title>RATA 線上會議</title>
  <style>
    #video-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, auto-fill);
      grid-auto-rows: 300px;
    }
    @media only screen and (min-width: 768px) {
      #video-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, 300px);
      grid-auto-rows: 300px;
    }
    }    
    
    video {
      width: 100%;
      height: 100%;
      object-fit: cover;
      -moz-transform:scaleX(-1);
      -webkit-transform:scaleX(-1);
      -o-transform:scaleX(-1);
      transform:scaleX(-1);
    }
    .vertical-center {
  margin: 0;
  position: absolute;
  top: 50%;
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}
  </style>
</head>
<body>
	<p id="msg">連線中，請稍後約15秒~</p>
  <div id="video-grid"></div>
  <div class="secondbody">
    <div class="middle">
        <div class="pptmid"><iframe src="https://365nthu-my.sharepoint.com/personal/107041033_office365_nthu_edu_tw/_layouts/15/Doc.aspx?sourcedoc={e1da4392-44dc-4064-ad85-b74135d8c0aa}&amp;action=embedview&amp;" 
            width="722px" height="565px" frameborder="0"></iframe></div>
    </div>
</div>
<div class="tasknote">
  <form>
    <div>
      <input type="text" name="subject" id="subject" placeholder="Subject"/>
    </div>
    <div>
      <label>Type:</label>
      <select type="select" name="type" id="type">
        <option value="om">Office Meeting</option>
        <option value="vc">Video Conference</option>
        <option value="tsk">Task</option>
      </select>
    </div>
    <div>
      <input name="detail" id="detail" style="resize: none;  height: 5em;" placeholder="Detail"></input>
      <textarae />
    </div>
    <div>
      <input ype="text" name="assignto" id="assignto" placeholder="Assign To ... use '@'"/>
    </div>
    <div>
      <input type="text" name="location" id="location" placeholder="Location"/>
    </div>
    <div>
      <label>Start At:</label>
      <input type="date" name="startat" id="startat"/>
    </div>
    <div>
      <label>End At:</label>
      <input type="date" name="endat" id="endat"/>
    </div>
    <div>
      <label>Priority:</label>
      <select type="select" name="important" id="important">
        <option value="y">Important</option>
        <option value="n">Medium</option>
      </select>
      <!-- <select type="select" name="urgent" id="urgent">
        <option value="y">Urgent</option>
        <option value="n">Not Urgent</option>
      </select> -->
    </div>
    <button id="createTask">Assign</button>
  </form>

</div>
  <!-- <a href='/video' style="text-align:center;display: flex; justify-content: center;"><i class="fa fa-times rematch" ></i></a> -->
</body>
<script>
  // rematch = document.getElementById('rematch');
</script>
<script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>
<script>

const socket = io()
const videoGrid = document.getElementById('video-grid')
const msg = document.getElementById('msg')
const myPeer = new Peer()
const myVideo = document.createElement('video')
myVideo.muted = true
const peers = {}
navigator.mediaDevices.getUserMedia({
  video: true,
  audio: true
}).then(stream => {
  addVideoStream(myVideo, stream)

  myPeer.on('call', call => {
    call.answer(stream)
    const video = document.createElement('video')
    call.on('stream', userVideoStream => {
      addVideoStream(video, userVideoStream)
    })
  })

  socket.on('user-connected', userId => {
    console.log("User Connected " + userId)
    connectToNewUser(userId, stream)
  })
})

socket.on('user-disconnected', userId => {
  if (peers[userId]) peers[userId].close()
})

myPeer.on('open', id => {
	console.log(ROOM_ID, id)
	if ( id ){msg.innerHTML = '';}
  socket.emit('join-room', ROOM_ID, id)//
})

function connectToNewUser(userId, stream) {
  const call = myPeer.call(userId, stream)
  const video = document.createElement('video')
  call.on('stream', userVideoStream => {
    addVideoStream(video, userVideoStream)
  })
  call.on('close', () => {
    video.remove()
  })

  peers[userId] = call
}

function addVideoStream(video, stream) {
  video.srcObject = stream
  video.addEventListener('loadedmetadata', () => {
    video.play()
  })
  const container = document.createElement('div')
  container.className = 'v-container'
  const person = document.createElement('div')
  person.className = 'person'
  container.appendChild(person)
  person.appendChild(video)
  videoGrid.append(container)
}


</script>

<script>
  async function createTask(){

let subject = document.querySelector('#subject').value;
let assigntoUsers = document.querySelector('#assignto').value;
let detail = document.querySelector('#detail').value;
let type= document.querySelector('#type').value;
let startat = document.querySelector('#startat').value;
let endat = document.querySelector('#endat').value;
let location = document.querySelector('#location').value;
let important = document.querySelector('#important').value;
// let urgent = document.querySelector('#urgent').value;

let host = "Austin";
var myRe = /(@[A-Z][a-z]+)/g;
var myArray = myRe.exec(assigntoUsers);
console.log('assignto', myArray.input)
var formData = new FormData();
formData.append('host', host);
formData.append('subject', subject);
formData.append('assignto', myArray.input);
formData.append('detail', detail);
formData.append('type', type);
formData.append('startat', startat);
formData.append('endat', endat);
formData.append('important', important);
// formData.append('urgent', urgent);


formData.append('location', location);

var res = await window.fetch("/api/create_task", {
  body: formData,
  method: 'POST',
  redirect:"follow",
  });


  console.log('createTaskres', res.ok);

}

</script>
</html>